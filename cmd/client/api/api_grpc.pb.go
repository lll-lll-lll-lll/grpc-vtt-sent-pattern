// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/api.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VTTSentPatternServiceClient is the client API for VTTSentPatternService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VTTSentPatternServiceClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	GetPattern(ctx context.Context, in *GetPatternRequest, opts ...grpc.CallOption) (*GetPatternResponse, error)
}

type vTTSentPatternServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVTTSentPatternServiceClient(cc grpc.ClientConnInterface) VTTSentPatternServiceClient {
	return &vTTSentPatternServiceClient{cc}
}

func (c *vTTSentPatternServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/sent_vtt.VTTSentPatternService/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTTSentPatternServiceClient) GetPattern(ctx context.Context, in *GetPatternRequest, opts ...grpc.CallOption) (*GetPatternResponse, error) {
	out := new(GetPatternResponse)
	err := c.cc.Invoke(ctx, "/sent_vtt.VTTSentPatternService/GetPattern", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VTTSentPatternServiceServer is the server API for VTTSentPatternService service.
// All implementations must embed UnimplementedVTTSentPatternServiceServer
// for forward compatibility
type VTTSentPatternServiceServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	GetPattern(context.Context, *GetPatternRequest) (*GetPatternResponse, error)
	mustEmbedUnimplementedVTTSentPatternServiceServer()
}

// UnimplementedVTTSentPatternServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVTTSentPatternServiceServer struct {
}

func (UnimplementedVTTSentPatternServiceServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedVTTSentPatternServiceServer) GetPattern(context.Context, *GetPatternRequest) (*GetPatternResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPattern not implemented")
}
func (UnimplementedVTTSentPatternServiceServer) mustEmbedUnimplementedVTTSentPatternServiceServer() {}

// UnsafeVTTSentPatternServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VTTSentPatternServiceServer will
// result in compilation errors.
type UnsafeVTTSentPatternServiceServer interface {
	mustEmbedUnimplementedVTTSentPatternServiceServer()
}

func RegisterVTTSentPatternServiceServer(s grpc.ServiceRegistrar, srv VTTSentPatternServiceServer) {
	s.RegisterService(&VTTSentPatternService_ServiceDesc, srv)
}

func _VTTSentPatternService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTTSentPatternServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sent_vtt.VTTSentPatternService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTTSentPatternServiceServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTTSentPatternService_GetPattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatternRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTTSentPatternServiceServer).GetPattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sent_vtt.VTTSentPatternService/GetPattern",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTTSentPatternServiceServer).GetPattern(ctx, req.(*GetPatternRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VTTSentPatternService_ServiceDesc is the grpc.ServiceDesc for VTTSentPatternService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VTTSentPatternService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sent_vtt.VTTSentPatternService",
	HandlerType: (*VTTSentPatternServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _VTTSentPatternService_Hello_Handler,
		},
		{
			MethodName: "GetPattern",
			Handler:    _VTTSentPatternService_GetPattern_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
